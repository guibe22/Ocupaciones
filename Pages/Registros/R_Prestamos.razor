@page "/prestamo"
@page "/prestamo/{PrestamoId:int}"

@inject PersonasBLL PersonasBLL
@inject PrestamosBLL PrestamosBLL
@inject NotificationService notificationService

<EditForm Model="prestamo" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="card text-primary">
        <div class="card-header text-center">
            <h1>Registro De Prestamos</h1>
        </div>
        <div class="card-body">

            <div class="row">

                  <div class="col-3">
                    <label for="txtId" class="form-label"> PrestamoID:</label>
                    <input type="number"  id="txtid" class="form-control" @bind-value="prestamo.PrestamoId"> 
                 </div>

                <div class="col-3 d-flex align-items-end">
                     <button name="btnBuscar" id="btnBuscar" class="btn btn-primary col-2" >
                        <span class="oi oi-magnifying-glass"></span> 
                    </button>
                </div>
            </div>
          


             <div class="row">
                <div class="col-6">
                    <label for="txtFecha" class="form-label">Fecha:</label>
                    <input type="date"  id="txtFecha" class="form-control" @bind-value="prestamo.Fecha">
                    <ValidationMessage For="@(() => prestamo.Fecha)" />
                </div>
            
                <div class="col-6">
                    <label for="txtVence" class="form-label">Vence:</label>
                    <input type="date"  id="txtVence" class="form-control" @bind-value="prestamo.Vence">
                    <ValidationMessage For="@(() => prestamo.Vence)" />
                </div>
            </div>
            <div class="row">
            <div class="col-6" >
                <label for="txtPersonaID" class="form-label">PersonaID:</label>
                
                <InputSelect class="form-select" @bind-Value="prestamo.PersonaId">
                        @foreach (var persona in PersonasBLL.GetList(o => true) )
                        {
                            <option value="@persona.PersonaId">@persona.Nombre</option>
                        }
                    </InputSelect>
                <ValidationMessage For="@(() => prestamo.PersonaId)" />
            </div>

            <div class="col-6">
                <label for="txtConcepto">Concepto:</label>
                <input type="text"  id="txtConcepto" class="form-control" @bind-value="prestamo.Concepto">
                <ValidationMessage For="@(() => prestamo.Concepto)" />
            </div>
        </div>
        

      <div class="row">
            <div class="col-6" >
                <label for="txtMonto" class="form-label">Monto:</label>
                <input type="number"  id="txtMonto" class="form-control" @bind-value="prestamo.Monto">
                <ValidationMessage For="@(() => prestamo.Monto)" />
            </div>

            <div class="col-6">
                <label for="txtBalance">Balance:</label>
                <input type="text"  id="txtBalance" class="form-control" @bind-value="prestamo.Balance">
                <ValidationMessage For="@(() => prestamo.Balance)" />
            </div>
        </div>

        

        </div>
        
        <div class=" card-footer text-center">

             <button name="btNuevo" id="btNuevo" class="btn btn-primary mr-2" @onclick="Nuevo">
            <span class="oi oi-plus"></span> Nuevo
            </button>

            <button name="btnGuardar" id="btnGuardar" class="btn btn-success mr-2" @onclick="Guardar">
            <span class=" oi oi-cloud-download"></span> Guardar
            </button>

            <button name="btnEliminar" id="btnEliminar" class="btn btn-danger"  @onclick="Eliminar">
            <span class="oi oi-trash"></span> Eliminar
            </button>
        </div>

        </div>
   

    


</EditForm>


@code {
    [Parameter]
    public int PrestamoId { get; set; }

    public  Prestamos prestamo {get; set;} = new Prestamos();

    protected override void OnInitialized()
    {
        if(PrestamoId>0){
            this.prestamo.PrestamoId = PrestamoId;
            this.Buscar();
        }
        
    }

    void Buscar(){
        var PrestamoEncontrado = PrestamosBLL.Buscar(prestamo.PrestamoId);
        if(PrestamoEncontrado!=null){
            this.prestamo= PrestamoEncontrado;
        }
    }

    void Eliminar(){
          if(!PrestamosBLL.Existe(prestamo.PrestamoId)){

                ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "este campo no Existe en la base de datos"
                    });
                
                
                
                return;
                }
            if(PrestamosBLL.Eliminar(prestamo)){

                 ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Eliminado correctamente"
                    });
                 this.Nuevo();

            }
   
    }

    bool Validar(){
        bool validacion= true;
        if(!PersonasBLL.Existe(prestamo.PersonaId)){ validacion= false;}
        if(String.IsNullOrEmpty(prestamo.Concepto)){ validacion= false;}
        if(prestamo.Monto <=0){validacion =false;}
        if(prestamo.Balance<=0){ validacion= false;}

        return validacion;


    }

    void Guardar(){

        if(!Validar()){return;}

        if(PrestamosBLL.Guardar(prestamo)){
            ShowNotification(
                 new NotificationMessage
                 {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado Correctamente"
                });

           ActualizarBalance();
           this.Nuevo();
           
        }
    }

    void ActualizarBalance(){

        var persona = PersonasBLL.Buscar(prestamo.PersonaId);
       List<Prestamos> lista=  PrestamosBLL.GetList(o => o.PersonaId == prestamo.PersonaId);
        int total=0;
        foreach (var prestamo in lista)
        {
            total= total + prestamo.Balance;
        }

        if(persona!=null){
            persona.Balance= total;
            PersonasBLL.Guardar(persona);
        }

        
    }

    

    void Nuevo(){

        this.prestamo= new Prestamos();
    }
  void ShowNotification(NotificationMessage message)
  {
     notificationService.Notify(message);
  }




   
}
