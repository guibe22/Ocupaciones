@page "/persona"

@page "/persona/{PersonaId:int}"

@inject PersonasBLL PersonasBLL
@inject OcupacionesBLL ocupacionesBll
@inject NotificationService notificationService

<EditForm Model="persona" OnInvalidSubmit="Guardar">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="card text-primary">
        <div class="card-header text-center">
            <h1>Registro De Personas</h1>
        </div>
        <div class="card-body">
            <div class="row">

                <div class="col-3">

                <label for="txtId"class="form-label">Persona ID:</label>
                <input type="number"  id="txtId" class="form-control" @bind-value="persona.PersonaId">
            </div>

             <div class="col-3 d-flex align-items-end">
                     <button name="btnBuscar" id="btnBuscar" class="btn btn-primary col-2" >
                        <span class="oi oi-magnifying-glass"></span> 
                    </button>
                </div>
            </div>
            

            <div class="col-6">

                <label for="txtNombre"class="form-label">Nombre:</label>
                <input type="text"  id="txtNombre" class="form-control" @bind-value="persona.Nombre">
                <ValidationMessage For="@(() => persona.Nombre)" />
                
            </div>

            <div class="row">

                <div class="col-6">

                <label for="txtTelefono"class="form-label">Telefono:</label>
                <input type="number"  id="txtTelefono" class="form-control" @bind-value="persona.Telefono">
                <ValidationMessage For="@(() => persona.Telefono)" />
                
                </div>

                 <div class="col-6">

                <label for="txtCelcular"class="form-label">Celular:</label>
                <input type="number"  id="txtCelcular" class="form-control" @bind-value="persona.Celular">
                <ValidationMessage For="@(() => persona.Celular)" />
                
                </div>

            </div>

             <div class="row">

                <div class="col-6">

                    <label for="txtEmail"class="form-label">Email:</label>
                    <input type="email" id="txtEmail" class="form-control" @bind-value="persona.Email">
                    <ValidationMessage For="@(() => persona.Email)" />
                
                </div>
                <div class="col-6">

                    <label for="txtDireccion"class="form-label">Direccion:</label>
                    <input type="text"  id="txtDireccion" class="form-control" @bind-value="persona.Direccion">
                    <ValidationMessage For="@(() => persona.Direccion)" />
                
                </div>
             </div>

             <div class="row">

                <div class="col-6">

                    <label for="txtFecha"class="form-label">Fecha:</label>
                    <input type="date"  id="txtFecha" class="form-control" @bind-value="persona.FechaNacimiento">
                    <ValidationMessage For="@(() => persona.FechaNacimiento)" />
                
                </div>

            <div class="col-6">

                    <label for="txtOcupacionId"class="form-label">Ocupacion ID:</label>
                    <InputSelect class="form-select" @bind-Value="persona.OcupacionId">
                        @foreach (var ocupacion in ocupacionesBll.GetList(o => true) )
                        {
                            <option value="@ocupacion.OcupacionId">@ocupacion.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => persona.OcupacionId)" />
                
            </div>
             </div>


        </div>

        <div class=" card-footer text-center">

             <button name="btNuevo" id="btNuevo" class="btn btn-primary mr-2" @onclick="Nuevo">
            <span class="oi oi-plus"></span> Nuevo
            </button>

            <button name="btnGuardar" id="btnGuardar" class="btn btn-success mr-2" @onclick="Guardar">
            <span class=" oi oi-cloud-download"></span> Guardar
            </button>

            <button name="btnEliminar"  id="btnEliminar" class="btn btn-danger"  @onclick="Eliminar">
            <span class="oi oi-trash"></span> Eliminar
            </button>
        </div>
    </div>


</EditForm>


@code {

    [Parameter]

    
    public int PersonaId { get; set; }
    public Personas persona { get; set; } =new Personas();

    


   

    protected override void OnInitialized()
        {

           

            if(PersonaId>0){
                this.persona.PersonaId = PersonaId;
                this.Buscar();
           }
        }

    void Buscar(){

        
            var PersonaEncontrada= PersonasBLL.Buscar(this.persona.PersonaId);

            if(PersonaEncontrada!=null){
                this.persona= PersonaEncontrada;
            }
            
        }

    void Eliminar(){

       if(!PersonasBLL.Existe(persona.PersonaId)){

                ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "este campo no Existe en la base de datos"
                    });

                return;
                }
            if(PersonasBLL.Eliminar(persona)){

                 ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Eliminado correctamente"
                    });
                 this.Nuevo();

            }
            }
    
    bool Validar(){

        bool validacion= true;

        if (String.IsNullOrEmpty(persona.Nombre)){; validacion= false;}
        if (String.IsNullOrEmpty(persona.Telefono)|| persona.Telefono.Length !=10) {   validacion= false;}
        if (String.IsNullOrEmpty(persona.Celular)|| persona.Celular.Length !=10 ){ validacion= false;}
        if (String.IsNullOrEmpty(persona.Email)){ validacion= false;}
        if (String.IsNullOrEmpty(persona.Direccion)){  validacion= false;}
        if (!ocupacionesBll.Existe(persona.OcupacionId)){validacion= false;}

        return validacion;

    }

    void Guardar(){

            if(PersonasBLL.GetList(o => o.Nombre== persona.Nombre).Count==1 &&
             !PersonasBLL.Existe(persona.PersonaId)){
                ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Esta persona ya existe en la base de datos."
                    });
                    return;

            }
            if(!Validar()){  return;}

            if( PersonasBLL.Guardar(this.persona)){
                ShowNotification(
                     new NotificationMessage
                    {
                         Severity = NotificationSeverity.Success,
                         Summary = "Guardado Correctamente"
                     });
                Nuevo();
                }



        }

    void Nuevo(){

        this.persona= new Personas();
    }

        void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }


 

}
